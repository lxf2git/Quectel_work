
一、项目名称：
	   miniQQ

二、项目功能：
	   通过服务器传输，实现多对多聊天，在线与离线的文件传输。聊天记录保存。

三、思路：
	   1、根据用户ID通过服务器实现两台客户端通信；
	   2、在客户端登录时，可以选择是已有账户登录并验证用户名与密码，或者创建新用户，服务器负责添加新用户；
	   3、用户登录成功后，服务器根据用户名将其保存在服务器的好友列表下发；
	   4、用户添加好友时，另一个客户端需确认，通过服务器将其互相加为好友，存入日志中记录，并将好友列表发送给客户端；
	   5、用户传输文件时，通过一个命令触发客户端的传输功能，可实现在线或离线传输功能。 

四、分工：
	   邢宏彬：
		客户端程序：负责注册，登录，给好友收发消息，留言（撤销）。提供重发功能。
	  黄冈贵：
		服务器功能函数（除转发）

	   樊迪
		服务器程序：编写服务器主函数，与客户端连接，客户端注册用户时，为其创建一个新用户，成功返回0。用户登录时，验证密码，
		用户加好友时，询问客户端是否同意，同意，把想要添加的好友发送到客户端的好友列表内，并保存。      用户传文件时，。

	   朱丽丽：
		服务器程序：用日志记录登录、注册、加好友列表数据，同时，将好友列表发送给客户端。
	       （与服务器主函数接口：int create_daily_record(struct infor, int sockfd, struct sockaddr_in addr, int temp)）


五、结构体：




struct UserInformation
{
		char userId[USER_NUMBER];       	//用户
		char passwd[PASS_NUMBER];		//密码
		char vip;				//vip
		long balance;				//余额
};
union dataOrinformation
{
		char data[200];
		struct UserInformation loginInformation;
};



typedef struct Data
{
		int  mode;				//数据类型
		char destAddr[20]; 			//目的地址
		char sourceAddr[20];			//源地址
		char fileName[20];
		char time[30];
		struct timeval vtime;			//微妙毫秒
		union dataOrinformation dorinform;	//数据或者信息

		struct data *next;
		struct data *prev;


}sData_package,*pData_package;

enum
{
		LOGIN,          //登入
		REGISTER,       //注册
		ADDFRIEND,      //添加好友
		FILE_REQUES,    //文件请求
		TELL_REQUES,    //谈话请求
		REQUES_EXIT,    //请求结束
		LOGINERROR,     //登录失败
		LOGINSUCCEED,   //登录成功
		REGISTERERROR,  //注册失败
		REGISTERSUCCEED,//注册成功
		LEAVE,			//下线通知
		CHECK,			//检测
		FRIENDRE,		//好友回应
		FRIENDLIST,		//好友链表
		END			//最后一个
};
typedef struct 
{
		int sockfd_send;        	        //发送套接子
		int sockfd_recv;			//接受
		int send_check;				//发送检验
		int recv_check;				//接受校验
		struct sockaddr_in addr_send;		//发送地址
		struct sockaddr_in addr_recv;		//接送地址
		struct sockaddr_in addr_Schec;		//发送检验地址
		struct sockaddr_in addr_Rchec;		//接受检验地址
}Socks;
/*发送队列结构体*/
typedef struct data_chain
{
		sData_package data;			//等待处理数据
		pthread_t id;                    	//线程id
		struct data_chain *next;		
		struct data_chain *prev;

} Thread_Data;

int login_menu();
int Send_fun(pData_package package,struct sockaddr_in *paddr,int sockfd);
sData_package Recv_fun(struct sockaddr_in *paddr,int rockfd);
/*初始化函数*/
int initSockfd_Serive(struct sockaddr_in *psaddr);
int initSockfd_Client(struct sockaddr_in *praddr);
int inintSend_Check(struct sockaddr_in *pcaddr);
int inintRecv_Check(struct sockaddr_in *pcaddr);
sData_package init_login(char*name,char *);
sData_package init_register(char*name,char*);
sData_package init_addfriend(char*name,char*);
sData_package init_file(char *buf_file,char*);
sData_package init_tell(char *buf_tell,char*);
//////////////////////////////////////////////

void * create_send(void* pHead);
void * Send_choose(void *pHead);
Thread_Data * read_Data(Thread_Data *pHead);       		//从链表中读取数据。
int Send_main(Socks Socks);
int SendToService(Socks Socks,sData_package data);		//发送到服务端
int Recv_main(Socks Socks);
int Recv_addfriend(sData_package package,Socks Socks);
int Recv_file(sData_package package);
int Recv_tell(sData_package package);
int Recv_list(sData_package package);
sData_package login_fun(int sockfd,struct sockaddr_in *psaddr,int rockfd);
sData_package register_fun(int sockfd,struct sockaddr_in *psaddr,int rockfd);
void myalarm(int sig);
Thread_Data * tell_addfriend(int mode,char* destAddr);
Thread_Data * tell_file(int mode,char* destAddr);
Thread_Data * tell_tell(int mode,char* destAddr);
int chain_insert(Thread_Data *pHead,Thread_Data *pInsert);
int chain_init(Thread_Data **p);
void create_list(Thread_Data *pTemp);
void list_show();


static sData_package (*Sendinit[5])(char *,char*) = {	init_login,
							init_register,
							init_addfriend,
							init_file,
							init_tell};
																				
static jmp_buf jmpbuffer;
#endif





