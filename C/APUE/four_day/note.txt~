fseeko fflush fdopen write read open close getline dup2 stat/fstat/lstat link symlink lseek  stdin stdout stderr fileno perror errno strerror
opendir closedir readdir mkdir rmdir chdir getcwd 
getopt 
getuid  getpwnam getgrgid getgrnam  setpwent getpwent endpwent   
getspnam setspent getspent  enspent

sprintf getpass crypt umask 

time localtime ctime asctime  

fork sleep setjmp-longjmp goto  exit/return  _exit   atexit

fork:代码区和数据区 复制
 pid_t wait(int *status);

 pid_t waitpid(pid_t pid, int *status, int options);
参数3：  0  等待子进程结束为止
        WNOHANG  不等待
      
参数1：
	pid<-1    等待其进程组gid等于pid绝对值的任意子进程  
	pid==-1   任意子进程
	pid==0    等待其进程组id等于当前进程组id的任意子进程
	pid >0   进程id号为pid的进程

参数2：
 NULL   丢弃结束信息
WIFEXITED(status) 判断是否正常退出  真 正常退出
WEXITSTATUS(status) 取得进程结束时的返回值
WIFSIGNALED(status) 判断是否是被信号终止 信号终止返回真
WTERMSIG(status)  判断是被哪个信号终止的

int system(const char *command);
 int access(const char *pathname, int mode);
检测文件权限

F_OK 测试文件是否存在
R_OK,可读 W_OK可写 X_OK 可执行

作业：写个程序 开启3个子进程 每个子进程每秒打印一个字符 第一个进程打印a 第二个进程打印b
     第三个进程打印c 然后父进程结束 
     再写个程序 终止上面的所有子进程





















